=======================
限制数据访问
=======================

.. important::
   本教程是 :doc:`server_framework_101` 教程的扩展。请确保您已经完成该教程，并使用您构建的 `estate` 模块作为本教程中的练习基础。

到目前为止，我们主要关注的是实现有用的功能。然而，在大多数业务场景中，*安全性* 很快就会成为一个问题：目前，

* 任何员工（即 `group_user`）都可以创建、读取、更新或删除物业、物业类型或物业标签。
* 如果安装了 `estate_account`，则只有允许处理发票的代理才能确认销售，因为这是 :ref:`创建发票 <tutorials/server_framework_101/13_other_module/create>` 的必要条件。

然而：

* 我们不希望第三方可以直接访问物业。
* 并非所有员工都是房地产经纪人（例如行政人员、物业经理等），我们不希望非代理看到可用的物业。
* 房地产代理不需要或不应该决定哪些物业类型或标签是 *可用* 的。
* 房地产代理可以有 *独家* 物业，我们不希望一个代理能够管理另一个代理的独家物业。
* 所有房地产代理都应该能够确认他们可以管理的物业的销售，但我们不希望他们能够验证或标记系统中的任何发票为已支付。

.. note::

    对于小型企业来说，我们可能对其中的一些或大多数要求都无所谓。

    由于为用户禁用不必要的安全规则比从头创建它们更容易，因此我们倾向于保守限制访问：用户可以根据需要或方便时放宽访问权限。

用户组
======

.. seealso::

    与此主题相关的文档可以在 :ref:`安全参考 <reference/security>` 中找到。

    :doc:`/contributing/development/coding_guidelines` 记录了主数据项的格式和位置。

.. admonition:: **目标**

    本节结束时，

    - 我们可以将员工设置为 *房地产代理* 或 *房地产经理*。
    - ``admin`` 用户是房地产经理。
    - 我们有一个新的 *房地产代理* 员工，没有发票或管理权限。

将个别安全规则与员工关联在一起，每次需要更改时都进行调整并不实际，因此 *用户组* 将安全规则与用户关联。它们对应于可以分配给员工的角色。

对于大多数 Odoo 应用程序 [#app]_ 来说，一个好的基线是有 *用户* 和 *经理*（或管理员）角色：经理可以更改应用程序的配置并监督其所有使用情况，而用户则可以使用应用程序 [#appuser]_。

这个基线对我们来说似乎足够了：

* 房地产经理可以配置系统（管理可用的类型和标签）以及监督所有的物业。
* 房地产代理可以管理他们负责的物业，或者管理未指定代理负责的物业。

根据 Odoo 的数据驱动特性，用户组不过是 ``res.groups`` 模型的记录。它们通常是模块的 :doc:`主数据 <define_module_data>` 的一部分，在模块的某个数据文件中定义。

一个简单的例子 `可以在这里找到 <https://github.com/odoo/odoo/blob/532c083cbbe0ee6e7a940e2bdc9c677bd56b62fa/addons/hr/security/hr_security.xml#L9-L14>`_。

.. exercise::

    #. 在合适的文件夹中创建 ``security.xml`` 文件，并将其添加到 ``__manifest__.py`` 文件中。

    #. 如果尚未完成，请在 ``__manifest__.py`` 文件中添加一个 `category` 字段，值为 ``Real Estate/Brokerage``。

    #. 添加一个记录，创建 id 为 ``estate_group_user`` 的用户组，名称为 "Agent"，类别为 ``base.module_category_real_estate_brokerage``。

    #. 在下方添加另一个记录，创建 id 为 ``estate_group_manager`` 的用户组，名称为 "Manager"，类别为 ``base.module_category_real_estate_brokerage``。``estate_group_manager`` 用户组需要隐含 ``estate_group_user``。

    .. note::

        这个 **category** 从哪里来？它是一个 *模块类别*。这里我们使用了 id 为 ``base.module_category_real_estate_brokerage`` 的类别，这是 Odoo 根据模块的 ``__manifest__.py`` 文件中设置的 `category` 自动生成的。
        你也可以在这里找到 Odoo 提供的 `默认模块类别列表 <https://github.com/odoo/odoo/blob/71da80deb044852a2af6b111d695f94aad7803ac/odoo/addons/base/data/ir_module_category_data.xml>`_。

    .. tip::

        由于我们修改了数据文件，请记得重新启动 Odoo 并使用 ``-u estate`` 更新模块。

    如果你进入 :menuselection:`设置 --> 管理用户` 并打开 ``admin`` 用户（"Mitchell Admin"），你应该会看到一个新的部分：

    .. figure:: restrict_data_access/groups.png

    将 admin 用户设置为 *房地产经理*。

.. exercise::

    通过 Web 界面，创建一个仅具有 "房地产代理" 访问权限的新用户。该用户不应有任何发票或管理权限。

    使用隐私模式或窗口以新用户身份登录（记得设置密码），作为房地产代理，你应该只看到房地产应用程序，可能还有讨论（聊天）应用程序：

    .. figure:: restrict_data_access/agent.png

访问权限
=============

.. seealso:: 与此主题相关的文档可以在 :ref:`参考/安全/acl <reference/security/acl>` 中找到。

.. admonition:: **目标**

    本节结束时，

    - 未被至少设为房地产代理的员工将无法看到房地产应用程序。
    - 房地产代理将无法更新物业类型或标签。

访问权限首次在 :doc:`server_framework_101/04_securityintro` 中介绍。

访问权限是一种通过用户组赋予用户对模型的访问权限的方式：将访问权限与用户组关联，拥有该用户组的所有用户都将获得相应的访问权限。

例如，我们不希望房地产代理能够修改可用的物业类型，因此不会将该访问权限与 "用户" 用户组关联。

访问权限只能赋予权限，不能删除权限：当系统检查访问权限时，它会查看与用户关联的 *任何* 访问权限是否授予了该权限。

====== ====== ==== ====== ======
用户组  创建   读取  更新   删除
------ ------ ---- ------ ------
A         X     X
B               X
C                     X
====== ====== ==== ====== ======

具有 A 和 C 用户组的用户将能够执行除删除之外的所有操作，而具有 B 和 C 用户组的用户将能够读取和更新对象，但不能创建或删除它。

.. note::

    * 访问权限的用户组可以省略，这意味着 ACL 适用于 *所有用户*，这是一种有用但风险较大的后备机制，因为根据安装的应用程序，它可能会授予非用户对模型的访问权限。
    * 如果没有访问权限适用于用户，则不授予访问权限（默认拒绝）。
    * 如果菜单项指向一个用户无权访问的模型，并且该菜单没有用户可见的子菜单，则菜单不会显示。

.. exercise:: 更新访问权限文件，以便：

    * 为您的房地产经理用户组赋予所有对象的全部访问权限。
    * 为房地产代理（房地产用户）仅赋予读取类型和标签的权限。
    * 不允许任何人删除物业。
    * 检查您的代理用户无法更改类型或标签，或删除物业，但他们仍然可以创建或更新物业。

    .. warning::

        请记住为您的 ``ir.model.access`` 记录提供不同的 xids，否则它们将相互覆盖。

由于 "demo" 用户没有被设置为房地产代理或经理，因此他们甚至无法看到房地产应用程序。使用隐私模式或窗口检查这一点（"demo" 用户的密码是 "demo"）。
记录规则
============

.. seealso:: 与此主题相关的文档可以在
             :ref:`reference/security/rules` 中找到。

.. admonition:: **目标**

    在本节结束时，代理将无法看到其同事的独家物业；但经理仍然可以看到所有内容。

访问权限可以授予对整个模型的访问权限，但我们通常需要更具体的限制：虽然代理可以与一般物业互动，但我们可能不希望他们更新甚至看到由其他代理管理的物业。

记录 *规则* 提供了这种精确性：它们可以授予或拒绝对个别记录的访问：

.. code-block:: xml

    <record id="rule_id" model="ir.rule">
        <field name="name">规则的作用描述</field>
        <field name="model_id" ref="model_to_manage"/>
        <field name="perm_read" eval="False"/>
        <field name="groups" eval="[Command.link(ref('base.group_user'))]"/>
        <field name="domain_force">[
            '|', ('user_id', '=', user.id),
                 ('user_id', '=', False)
        ]</field>
    </record>

:ref:`reference/orm/domains` 通过域的方式管理访问：如果记录通过域的检查，则授予访问权限，否则拒绝访问。

.. tip::

    由于规则往往非常复杂，并且通常不会大量创建，因此它们通常通过 XML 而非用于访问权限的 CSV 文件创建。

上述规则：

* 仅适用于“创建”、“更新”（写入）和“删除”（删除）操作：在这里我们希望所有员工都可以看到其他用户的记录，但只有记录的作者或分配的用户才能更新记录。
* 是 :ref:`非全局规则 <reference/security/rules/global>`，因此我们可以为例如经理等用户提供附加规则。
* 如果当前用户（``user.id``）在记录上被设置（例如创建或分配），或者记录没有关联的用户，则允许进行操作。

.. note::

    如果没有为某个模型和操作定义规则或规则不适用，则允许操作（*默认允许*）。如果访问权限设置不正确（过于宽松），这可能会产生奇怪的效果。

.. exercise::

    定义一个规则，限制代理只能查看或修改没有销售人员的物业，或他们自己作为销售人员的物业。

    你可能需要创建第二个房地产代理用户，或者创建一些销售人员为经理或其他用户的物业。

    验证你的房地产经理是否仍然可以查看所有物业。如果不能，为什么？请记住：

        ``estate_group_manager`` 用户组需要隐含 ``estate_group_user``。

安全覆盖
=================

绕过安全
------------------

.. admonition:: **目标**

    在本节结束时，代理应能够确认物业销售，而无需拥有发票管理权限。

如果你尝试以房地产代理的身份将物业标记为“已售”，你应该会收到访问错误：

.. figure:: restrict_data_access/error.png

这是因为 ``estate_account`` 在此过程中尝试创建发票，而创建发票需要具有所有发票管理的权限。

我们希望代理能够确认销售，但不希望他们拥有完整的发票管理权限，这意味着我们需要 *绕过* Odoo 的正常安全检查，以便尽管当前用户没有权限，仍然能够创建发票。

在 Odoo 中，有两种主要方法可以绕过现有的安全检查，可以是有意为之或作为副作用：

* ``sudo()`` 方法将在“sudo 模式”下创建一个新的记录集，该模式忽略所有访问权限和记录规则（尽管硬编码的用户组和用户检查仍然可能适用）。
* 执行原始 SQL 查询将通过绕过 ORM 来绕过访问权限和记录规则。

.. exercise::

    更新 ``estate_account``，在创建发票时绕过访问权限和规则。

.. danger::

    这些功能通常应避免使用，仅在经过极其仔细的检查之后，确认当前用户和操作确实应能够绕过正常的访问权限验证时才使用。

    以这种模式执行的操作应尽可能减少对用户输入的依赖，并应尽可能多地验证这些输入。
以编程方式检查安全性
----------------------------------

.. admonition:: **目标**

    在本节结束时，发票的创建应能够应对任何与 ``estate`` 相关的安全问题。

在 Odoo 中，访问权限和记录规则仅在 *通过 ORM 执行数据访问* 时进行检查，例如通过 ORM 方法创建、读取、搜索、写入或删除记录。其他方法 *不一定* 检查任何形式的访问权限。

在上一节中，我们在 ``action_sold`` 中绕过了创建发票时的记录规则。此绕过可以通过任何用户访问，而无需检查任何访问权限：

- 在 ``estate_account`` 中的 ``action_sold`` 方法中，在创建发票之前添加一个打印语句（因为创建发票会访问物业，因此触发 ACL 检查），例如::

    print(" reached ".center(100, '='))

你应该会在 Odoo 日志中看到 ``reached``，随后是一个访问错误。

.. danger:: 仅仅因为你已经进入了 Python 代码，并不意味着任何访问权限或规则已经或将被检查。

*目前*，通过访问 ``self`` 上的数据以及调用 ``super()``（它执行相同操作并 *更新* ``self``），隐式地检查了访问权限，这会触发访问错误并取消事务，从而“取消”创建发票。

*然而*，如果未来发生变化，或者我们在方法中添加了副作用（例如向政府机构报告销售），或者 ``estate`` 中引入了漏洞，……那么不具备权限的用户可能会触发他们不应有权限执行的操作。

因此，在执行非 CRUD 操作时，或合法绕过 ORM 或安全性时，或者触发其他副作用时，进行 *显式安全检查* 是极其重要的。

可以通过以下方式进行显式安全检查：

* 检查当前用户是谁（``self.env.user``），并将其与特定模型或记录匹配。
* 检查当前用户是否具有硬编码的特定用户组，以允许或拒绝操作（``self.env.user.has_group``）。
* 在记录集上调用 ``check_access_rights(operation)`` 方法，该方法验证当前用户是否具有访问该模型的权限。
* 在非空的记录集上调用 ``check_access_rule(operations)`` 方法，验证当前用户是否被允许对 *每条* 记录执行该操作。

.. warning:: 检查访问权限和检查记录规则是两个独立的操作，如果你在检查记录规则，你通常也需要提前检查访问权限。

.. exercise::

    在创建发票之前，使用 ``check_access_rights`` 和 ``check_access_rule`` 以确保当前用户可以更新一般物业以及发票对应的具体物业。

    重新运行绕过脚本，检查错误是否在打印语句之前发生。

.. _tutorials/restrict_data_access/multicompany:
多公司安全性
======================

.. seealso::

    :ref:`reference/howtos/company` 概述了多公司功能，特别是 :ref:`多公司安全规则 <howto/company/security>`。

    关于规则的文档可以在 :ref:`reference/security/rules` 中找到。

.. admonition:: **目标**

    在本节结束时，代理商只能访问他们所属的机构（或机构）的物业。

由于某种原因，我们可能需要将我们的房地产业务作为多个公司来管理，例如我们可能有较为自主的代理机构、特许经营设置，或多个品牌（可能是通过收购其他房地产业务而来），这些品牌在法律或财务上相互独立。

Odoo 可以用于在同一系统中管理多个公司，然而，具体的处理则由各个模块决定：Odoo 本身提供了处理公司依赖字段和 *多公司规则* 的工具，而这是我们将要关注的重点。

我们希望不同的代理机构彼此隔离，物业属于特定代理机构，用户（无论是代理商还是经理）只能看到与他们的机构相关的物业。

如前所述，由于这基于复杂的记录，对于用户来说放宽规则比收紧规则更容易，因此采取相对更严格的安全模型是有意义的。

多公司规则只是基于 ``company_ids`` 或 ``company_id`` 字段的记录规则：

* ``company_ids`` 是当前用户有权访问的所有公司
* ``company_id`` 是当前激活的公司（用户当前工作的公司）。

多公司规则 *通常* 使用前者，即检查记录是否与用户有权访问的 *某个* 公司相关：

.. code-block:: xml

    <record model="ir.rule" id="hr_appraisal_plan_comp_rule">
        <field name="name">考核计划多公司</field>
        <field name="model_id" ref="model_hr_appraisal_plan"/>
        <field name="domain_force">[
            '|', ('company_id', '=', False),
                 ('company_id', 'in', company_ids)
        ]</field>
    </record>

.. danger::

    多公司规则通常是 :ref:`全局规则 <reference/security/rules/global>`，否则可能会有很高的风险，其他规则可能会绕过多公司规则。

.. exercise::

    * 为 ``estate.property`` 添加一个 ``company_id`` 字段，它应为必填字段（我们不希望出现无机构的物业），并且应默认为当前用户的当前公司。
    * 创建一个新公司，并为该公司添加一个新的房地产代理商。
    * 经理应是两个公司的成员。
    * 老代理商应仅为老公司的成员。
    * 在每个公司中创建一些物业（可以使用经理的公司选择器，也可以使用代理商）。取消设置默认的销售人员，以避免触发 *那条* 规则。
    * 所有代理商都可以看到所有公司，这是不理想的，添加记录规则来限制此行为。

.. warning:: 在更改模型或数据后，记得使用 ``--update`` 参数更新你的模块。

可见性 ≠ 安全性
======================

.. admonition:: **目标**

    在本节结束时，房地产代理商不应看到房地产应用程序的设置菜单，但仍应能够设置物业类型或标签。

特定的 Odoo 模型可以直接与用户组（或公司、用户）关联。使用这些关联时，重要的是要弄清楚它们是 *安全* 还是 *可见性* 功能：

* *可见性* 功能意味着用户仍然可以通过其他部分的界面访问模型或记录，或者通过 :doc:`使用 RPC 执行操作 <../reference/external_api>`，在某些上下文中，内容可能只是不会在网页界面中显示出来。
* *安全* 功能意味着用户无法访问记录、字段或操作。

以下是一些示例：

* *模型字段* 上的用户组（在 Python 中）是安全功能，组外用户无法检索该字段，甚至不知道它的存在。

  示例：在服务器操作中，`只有系统用户可以查看或更新 Python 代码 <https://github.com/odoo/odoo/blob/7058e338a980268df1c502b8b2860bdd8be9f727/odoo/addons/base/models/ir_actions.py#L414-L417>`_。
* *视图元素* 上的用户组（在 XML 中）是可见性功能，组外用户将无法在表单中看到该元素或其内容，但他们仍然可以与对象交互（包括该字段）。

  示例：`只有经理有一个直接的筛选器来查看他们团队的请假记录 <https://github.com/odoo/odoo/blob/8e19904bcaff8300803a7b596c02ec45fcf36ae6/addons/hr_holidays/report/hr_leave_reports.xml#L16>`_。
* 菜单和操作上的用户组是可见性功能，菜单或操作不会在界面中显示，但这并不妨碍直接与底层对象进行交互。

  示例：`只有系统管理员可以看到 elearning 设置菜单 <https://github.com/odoo/odoo/blob/ff828a3e0c5386dc54e6a46fd71de9272ef3b691/addons/website_slides/views/website_slides_menu_views.xml#L64-L69>`_。

.. exercise::

    房地产代理商无法添加物业类型或标签，但在创建物业时，他们可以在物业表单视图中看到这些选项。

    设置菜单只会增加他们界面的杂乱感，使其仅对经理可见。

尽管代理商不再能够访问物业类型和物业标签菜单，但他们仍然可以访问底层对象，因为他们仍然可以为其物业选择标签或类型。

.. [#app] Odoo 应用程序是覆盖一个业务领域或领域的相关模块组，通常由一个基础模块和若干扩展模块组成，这些扩展模块为基础模块增加可选或特定的功能，或与其他业务领域相链接。

.. [#appuser] 对于可能由大多数或所有员工使用的应用程序，可能不需要“应用程序用户”角色，并将其功能直接授予所有员工，例如通常所有员工都可以提交费用或请假。
